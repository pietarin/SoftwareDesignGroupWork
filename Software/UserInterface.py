# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UserInterface.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from genericpath import exists
import json
from ctypes import alignment
from pickle import TRUE
from PyQt5 import QtCore, QtGui, QtWidgets
from SelectableComboBox import CheckableComboBox
#from Plotter import Plotter


class Ui_MainWindow(object):
    _dataHandler = None
    _smearHandler = None
    _barChartSmear = None
    _barChartStatfi = None
    _smearPlotLayout = QtWidgets.QVBoxLayout()
    _smearPlotLayout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
    _statfiPlotLayout = QtWidgets.QVBoxLayout()
    _statfiPlotLayout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)

    # Chart and plotting parameters:
    _smear = True
    _statfi = False
    _bar = False
    _line = True

    def __init__(self, dataHandler, Plotter):
        self._dataHandler = dataHandler
        self._barChartSmear = Plotter(self._dataHandler)
        self._barChartStatfi = Plotter(self._dataHandler)
        object.__init__(self)      

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setStyleSheet("background-color: rgb(16, 39, 112);")

        # Create centralwidget
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.CentralWidgetLayout = QtWidgets.QGridLayout(self.centralwidget)

        # Create horizontal layout main to contain left and right panels
        self.horizontalLayout_Main = QtWidgets.QHBoxLayout()
        self.horizontalLayout_Main.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)

        # Create Left panel
        self.frame_LeftPanel = QtWidgets.QFrame(self.centralwidget)
        self.LeftPanelVertical = QtWidgets.QVBoxLayout(self.frame_LeftPanel)
        self.verticalLayout_LeftPanel = QtWidgets.QVBoxLayout()

        # Create Favorites label
        self.label_Favorites = QtWidgets.QLabel(self.frame_LeftPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.label_Favorites.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        self.label_Favorites.setFont(font)
        self.label_Favorites.setStyleSheet("color: rgb(89, 189, 244);")
        self.label_Favorites.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout_LeftPanel.addWidget(self.label_Favorites)

        # Create Favorites Scroll Area
        self.scrollArea_Favorites = QtWidgets.QScrollArea(self.frame_LeftPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.scrollArea_Favorites.setSizePolicy(sizePolicy)
        self.scrollArea_Favorites.setStyleSheet("background-color: rgb(172, 208, 234);\n"
"border-style: outset;\n"
"border-width: 5px;\n"
"border-color: rgb(102, 126, 173);")
        self.scrollArea_Favorites.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.scrollArea_Favorites.setWidgetResizable(True)

        self.Layout_Favorites = QtWidgets.QVBoxLayout(self.frame_LeftPanel)
        self.group_Favorites = QtWidgets.QGroupBox()
        self.group_Favorites.setLayout(self.Layout_Favorites)
        self.scrollArea_Favorites.setWidget(self.group_Favorites)
        self.verticalLayout_LeftPanel.addWidget(self.scrollArea_Favorites)

        # Create Search History Label
        self.label_SearchHistory = QtWidgets.QLabel(self.frame_LeftPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.label_SearchHistory.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        self.label_SearchHistory.setFont(font)
        self.label_SearchHistory.setStyleSheet("color: rgb(89, 189, 244);")
        self.label_SearchHistory.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout_LeftPanel.addWidget(self.label_SearchHistory)

        # Create Search History Scroll Area
        self.scrollArea_SearchHistory = QtWidgets.QScrollArea(self.frame_LeftPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.scrollArea_SearchHistory.setSizePolicy(sizePolicy)
        self.scrollArea_SearchHistory.setStyleSheet("background-color: rgb(172, 208, 234);\n"
"border-style: outset;\n"
"border-width: 5px;\n"
"border-color: rgb(102, 126, 173);\n"
"\n"
"")
        self.scrollArea_SearchHistory.setWidgetResizable(True)

        self.Layout_SearchHistory = QtWidgets.QVBoxLayout(self.frame_LeftPanel)
        self.group_SearchHistory = QtWidgets.QGroupBox()
        self.group_SearchHistory.setLayout(self.Layout_SearchHistory)
        self.scrollArea_SearchHistory.setWidget(self.group_SearchHistory)
        self.verticalLayout_LeftPanel.addWidget(self.scrollArea_SearchHistory)

        self.verticalLayout_LeftPanel.addWidget(self.scrollArea_SearchHistory)

        # Set Leftpanel vertical layout stretch
        self.verticalLayout_LeftPanel.setStretch(0, 1)
        self.verticalLayout_LeftPanel.setStretch(1, 6)
        self.verticalLayout_LeftPanel.setStretch(2, 1)
        self.verticalLayout_LeftPanel.setStretch(3, 16)
        self.LeftPanelVertical.addLayout(self.verticalLayout_LeftPanel)
        self.horizontalLayout_Main.addWidget(self.frame_LeftPanel)

        # Create right panel
        self.frame_RightPanel = QtWidgets.QFrame(self.centralwidget)
        self.frame_RightPanel.setStyleSheet("background-color: rgb(172, 208, 234);\n"
"")
        self.RightPanelVertical = QtWidgets.QVBoxLayout(self.frame_RightPanel)
        self.RightPanelVertical.setContentsMargins(10, 0, 10, 0)
        self.verticalLayout_RightPanel = QtWidgets.QVBoxLayout()
        self.horizontalLayout_TopButtons = QtWidgets.QHBoxLayout()
        self.horizontalLayout_TopButtons.setContentsMargins(10, 10, 10, 10)

        # Createa topbuttons left spacer
        spacerItem = QtWidgets.QSpacerItem(40, 40, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_TopButtons.addItem(spacerItem)

        # Create Smear Button
        self.pushButton_Smear = QtWidgets.QPushButton(self.frame_RightPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.pushButton_Smear.setSizePolicy(sizePolicy)
        self.pushButton_Smear.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        self.pushButton_Smear.setFont(font)
        self.pushButton_Smear.setStyleSheet("QPushButton {\n"
"    border-radius: 10px;\n"
"    background-color: rgb(16, 39, 112);\n"
"    border-style: outset;\n"
"    border-width: 5px;\n"
"    border-color: rgb(102, 126, 173);\n"
"    color: rgb(172, 208, 234);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"        background-color: rgb(66, 244, 223);\n"
"        color: rgb(0,0,0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"        background-color: rgb(179, 241, 244);\n"
"        color: rgb(0,0,0);\n"
"}")
        self.horizontalLayout_TopButtons.addWidget(self.pushButton_Smear)

        # Create spacer between top buttons
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_TopButtons.addItem(spacerItem1)

        # Create Statfi button
        self.pushButton_Statfi = QtWidgets.QPushButton(self.frame_RightPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHeightForWidth(self.pushButton_Statfi.sizePolicy().hasHeightForWidth())
        self.pushButton_Statfi.setSizePolicy(sizePolicy)
        self.pushButton_Statfi.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(30)
        font.setBold(True)
        self.pushButton_Statfi.setFont(font)
        self.pushButton_Statfi.setStyleSheet("QPushButton {\n"
"    border-radius: 10px;\n"
"    background-color: rgb(16, 39, 112);\n"
"    border-style: outset;\n"
"    border-width: 5px;\n"
"    border-color: rgb(102, 126, 173);\n"
"    color: rgb(172, 208, 234);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"        background-color: rgb(66, 244, 223);\n"
"        color: rgb(0,0,0);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"        background-color: rgb(179, 241, 244);\n"
"        color: rgb(0,0,0);\n"
"}")
        self.horizontalLayout_TopButtons.addWidget(self.pushButton_Statfi)

        # Create top buttons right spacer
        spacerItem2 = QtWidgets.QSpacerItem(40, 40, QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_TopButtons.addItem(spacerItem2)

        # Set stretch for  top button layout
        self.horizontalLayout_TopButtons.setStretch(0, 19)
        self.horizontalLayout_TopButtons.setStretch(1, 12)
        self.horizontalLayout_TopButtons.setStretch(2, 1)
        self.horizontalLayout_TopButtons.setStretch(3, 12)
        self.horizontalLayout_TopButtons.setStretch(4, 19)
        self.verticalLayout_RightPanel.addLayout(self.horizontalLayout_TopButtons)

        # Create Smear plot settings
        self.frame_PlotSettings_Smear = QtWidgets.QFrame(self.frame_RightPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.frame_PlotSettings_Smear.setSizePolicy(sizePolicy)
        self.frame_PlotSettings_Smear.setMinimumSize(QtCore.QSize(0, 76))
        self.frame_PlotSettings_Smear.setStyleSheet("background-color: rgb(16, 39, 112);\n"
"border-radius: 5px;")
        self.frame_PlotSettings_Smear.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_PlotSettings_Smear.setFrameShadow(QtWidgets.QFrame.Raised)
        self.PlotSettingSmear = QtWidgets.QHBoxLayout(self.frame_PlotSettings_Smear)
        self.PlotSettingSmear.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)

        # Create horizontal layout for Stations ComboBox

        self.verticalLayout_comboBoxStations = QtWidgets.QVBoxLayout()
        self.verticalLayout_comboBoxStations.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_comboBoxStations.setSpacing(0)

        # Create Stations text and add it to layout
        self.label_stations = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.label_stations.setSizePolicy(sizePolicy)
        self.label_stations.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.label_stations.setFont(font)
        self.label_stations.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;\n"
)
        self.label_stations.setAlignment(QtCore.Qt.AlignCenter)


        self.verticalLayout_comboBoxStations.addWidget(self.label_stations)

        # Create Stations combobox
        self.comboBox_Stations = CheckableComboBox(self.frame_PlotSettings_Smear)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.comboBox_Stations.setSizePolicy(sizePolicy)
        self.comboBox_Stations.setMinimumSize(QtCore.QSize(150, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.comboBox_Stations.setFont(font)
        self.comboBox_Stations.setAutoFillBackground(False)
        self.comboBox_Stations.setStyleSheet("border-radius: 5px;\n"
"background-color: rgb(89, 189, 244);")
        self.verticalLayout_comboBoxStations.addWidget(self.comboBox_Stations)
        self.PlotSettingSmear.addLayout(self.verticalLayout_comboBoxStations)

        self.verticalLayout_comboBoxStations.addWidget(self.comboBox_Stations)


        # Create horizontal layout for Variables ComboBox
        self.verticalLayout_comboBoxVariables = QtWidgets.QVBoxLayout()
        self.verticalLayout_comboBoxVariables.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_comboBoxVariables.setSpacing(0)

        # Create Variables text and add it to layout
        self.label_variables = QtWidgets.QLabel()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.label_variables.setSizePolicy(sizePolicy)
        self.label_variables.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.label_variables.setFont(font)
        self.label_variables.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;\n"
)
        self.label_variables.setAlignment(QtCore.Qt.AlignCenter)
        self.verticalLayout_comboBoxVariables.addWidget(self.label_variables)

        # Create Variables combobox
        self.comboBox_Variables = CheckableComboBox(self.frame_PlotSettings_Smear)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.comboBox_Variables.setSizePolicy(sizePolicy)
        self.comboBox_Variables.setMinimumSize(QtCore.QSize(150, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.comboBox_Variables.setFont(font)
        self.comboBox_Variables.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.comboBox_Variables.setStyleSheet("border-radius: 5px;\n"
"background-color: rgb(89, 189, 244);")
        self.verticalLayout_comboBoxVariables.addWidget(self.comboBox_Variables)

        self.PlotSettingSmear.addLayout(self.verticalLayout_comboBoxVariables)

        # Create Spacer to smear plot settings
        spacerItem3 = QtWidgets.QSpacerItem(852, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.PlotSettingSmear.addItem(spacerItem3)

        # Create frame_TimeEdit_Statfiself.frame_TimeEdit_Statfi to fit time edits.
        self.frame_timeEdit_Smear = QtWidgets.QFrame(self.frame_PlotSettings_Smear)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.frame_timeEdit_Smear.setSizePolicy(sizePolicy)
        self.frame_timeEdit_Smear.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_timeEdit_Smear.setFrameShadow(QtWidgets.QFrame.Raised)
        self.gridLayout_timeEdit_Smear = QtWidgets.QGridLayout(self.frame_timeEdit_Smear)
        self.gridLayout_timeEdit_Smear.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.gridLayout_timeEdit_Smear.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_timeEdit_Smear.setSpacing(0)

        # Create "to" Label for Smear
        self.label_to_Smear = QtWidgets.QLabel(self.frame_timeEdit_Smear)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.label_to_Smear.setSizePolicy(sizePolicy)
        self.label_to_Smear.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.label_to_Smear.setFont(font)
        self.label_to_Smear.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;\n"
"border-bottom-left-radius: 10px;")
        self.label_to_Smear.setAlignment(QtCore.Qt.AlignCenter)

        # Create gridlayout for timeEdits in Smear
        self.gridLayout_timeEdit_Smear.addWidget(self.label_to_Smear, 1, 0, 1, 1)
        self.dateTime_from_Smear = QtWidgets.QDateTimeEdit(self.frame_timeEdit_Smear)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)

        # Creata "From" TimeEdit for Smear
        self.dateTime_from_Smear.setSizePolicy(sizePolicy)
        self.dateTime_from_Smear.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.dateTime_from_Smear.setFont(font)
        self.dateTime_from_Smear.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;")
        self.dateTime_from_Smear.setCalendarPopup(True)
        self.dateTime_from_Smear.setDisplayFormat("yyyy/MM/dd/hh")
        dtmin = QtCore.QDate(1990,1,1)
        self.dateTime_from_Smear.setMinimumDate(dtmin)

        today = QtCore.QDateTime.currentDateTime()
        self.dateTime_from_Smear.setDateTime(today)
        self.dateTime_from_Smear.setMaximumDateTime(today)

        self.gridLayout_timeEdit_Smear.addWidget(self.dateTime_from_Smear, 0, 1, 1, 1)
        self.dateTime_to_Smear = QtWidgets.QDateTimeEdit(self.frame_timeEdit_Smear)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)

        # Create "to" TimeEdit for Smear
        self.dateTime_to_Smear.setSizePolicy(sizePolicy)
        self.dateTime_to_Smear.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.dateTime_to_Smear.setFont(font)
        self.dateTime_to_Smear.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;")
        self.dateTime_to_Smear.setCalendarPopup(True)
        self.dateTime_to_Smear.setDisplayFormat("yyyy/MM/dd/hh")
        dtmin = QtCore.QDate(1990,1,1)
        self.dateTime_to_Smear.setMinimumDate(dtmin)
        today = QtCore.QDateTime.currentDateTime()
        self.dateTime_to_Smear.setDateTime(today)
        self.dateTime_to_Smear.setMaximumDateTime(today)
        self.gridLayout_timeEdit_Smear.addWidget(self.dateTime_to_Smear, 1, 1, 1, 1)

        # Create "from" label for Smear
        self.label_from_Smear = QtWidgets.QLabel(self.frame_timeEdit_Smear)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.label_from_Smear.setSizePolicy(sizePolicy)
        self.label_from_Smear.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.label_from_Smear.setFont(font)
        self.label_from_Smear.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_from_Smear.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;\n"
"border-top-left-radius: 10px;")
        self.label_from_Smear.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout_timeEdit_Smear.addWidget(self.label_from_Smear, 0, 0, 1, 1)
        self.PlotSettingSmear.addWidget(self.frame_timeEdit_Smear)

        # Create push button plot Smear
        self.pushButton_Plot_Smear = QtWidgets.QPushButton(self.frame_PlotSettings_Smear)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.pushButton_Plot_Smear.setSizePolicy(sizePolicy)
        self.pushButton_Plot_Smear.setMinimumSize(QtCore.QSize(75, 40))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.pushButton_Plot_Smear.setFont(font)
        self.pushButton_Plot_Smear.setStyleSheet("QPushButton {\n"
"    border-radius: 5px;\n"
"    background-color: rgb(89, 189, 244);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"        background-color: rgb(66, 244, 223);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"        background-color: rgb(179, 241, 244);\n"
"}\n"
"\n"
"")
        self.PlotSettingSmear.addWidget(self.pushButton_Plot_Smear)
        self.verticalLayout_RightPanel.addWidget(self.frame_PlotSettings_Smear)
        self.verticalLayout_RightPanel.setSpacing(0)

        # Create frame_TimeEdit_Statfiself.frame_TimeEdit_Statfi for plotsettings Statfi
        self.frame_PlotSettings_Statfi = QtWidgets.QFrame(self.frame_RightPanel)
        self.frame_PlotSettings_Statfi.setMinimumSize(QtCore.QSize(0, 76))
        self.frame_PlotSettings_Statfi.setStyleSheet("background-color: rgb(16, 39, 112);\n"
"border-radius: 5px;")
        self.frame_PlotSettings_Statfi.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_PlotSettings_Statfi.setFrameShadow(QtWidgets.QFrame.Raised)
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_PlotSettings_Statfi)
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)

        # Create Volume Checkbox
        self.checkBox_Volume = QtWidgets.QCheckBox(self.frame_PlotSettings_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.checkBox_Volume.setMinimumWidth(110)
        self.checkBox_Volume.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.checkBox_Volume.setFont(font)
        self.checkBox_Volume.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.checkBox_Volume.setStyleSheet("QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox {\n"
"    background-color: rgb(89, 189, 244);\n"
"}\n"
"")
        self.horizontalLayout.addWidget(self.checkBox_Volume)

        # Create Intensity CheckBox
        self.checkBox_Intensity = QtWidgets.QCheckBox(self.frame_PlotSettings_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.checkBox_Intensity.setMinimumWidth(130)
        self.checkBox_Intensity.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.checkBox_Intensity.setFont(font)
        self.checkBox_Intensity.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.checkBox_Intensity.setStyleSheet("QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox {\n"
"    background-color: rgb(89, 189, 244);\n"
"}")
        self.horizontalLayout.addWidget(self.checkBox_Intensity)

        # Create Indexed CheckBox
        self.checkBox_Indexed = QtWidgets.QCheckBox(self.frame_PlotSettings_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.checkBox_Indexed.setMinimumWidth(120)
        self.checkBox_Indexed.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.checkBox_Indexed.setFont(font)
        self.checkBox_Indexed.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.checkBox_Indexed.setStyleSheet("QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox {\n"
"    background-color: rgb(89, 189, 244);\n"
"}")
        self.horizontalLayout.addWidget(self.checkBox_Indexed)

        # Create intensityindexed checkbox
        self.checkBox_IntensityIndexed = QtWidgets.QCheckBox(self.frame_PlotSettings_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.checkBox_IntensityIndexed.setMinimumWidth(220)
        self.checkBox_IntensityIndexed.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.checkBox_IntensityIndexed.setFont(font)
        self.checkBox_IntensityIndexed.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.checkBox_IntensityIndexed.setStyleSheet("QCheckBox::indicator {\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"\n"
"QCheckBox {\n"
"    background-color: rgb(89, 189, 244);\n"
"}")
        self.horizontalLayout.addWidget(self.checkBox_IntensityIndexed)

        #Create Spacer to the right of checkboxes
        spacerItem4 = QtWidgets.QSpacerItem(659, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)

        # Create Frame for plotsettings statfi
        self.frame_TimeEdit_Statfi = QtWidgets.QFrame(self.frame_PlotSettings_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.frame_TimeEdit_Statfi.setSizePolicy(sizePolicy)
        self.frame_TimeEdit_Statfi.setMinimumSize(QtCore.QSize(0, 0))
        self.frame_TimeEdit_Statfi.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_TimeEdit_Statfi.setFrameShadow(QtWidgets.QFrame.Raised)
        self.gridLayout_timeEdit_Statfi = QtWidgets.QGridLayout(self.frame_TimeEdit_Statfi)
        self.gridLayout_timeEdit_Statfi.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.gridLayout_timeEdit_Statfi.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_timeEdit_Statfi.setSpacing(0)

        # Create "From" Label for Statfi
        self.label_from_Statfi = QtWidgets.QLabel(self.frame_TimeEdit_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.label_from_Statfi.setSizePolicy(sizePolicy)
        self.label_from_Statfi.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.label_from_Statfi.setFont(font)
        self.label_from_Statfi.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_from_Statfi.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;\n"
"border-top-left-radius: 10px;")
        self.label_from_Statfi.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout_timeEdit_Statfi.addWidget(self.label_from_Statfi, 0, 0, 1, 1)

        # Create "From" timeEdit for statfi
        self.dateTime_from_Statfi = QtWidgets.QDateTimeEdit(self.frame_TimeEdit_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.dateTime_from_Statfi.setSizePolicy(sizePolicy)
        self.dateTime_from_Statfi.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.dateTime_from_Statfi.setFont(font)
        self.dateTime_from_Statfi.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;")
        self.dateTime_from_Statfi.setCalendarPopup(False)
        self.dateTime_from_Statfi.setDisplayFormat("yyyy")
        dtmin = QtCore.QDate(1990,1,1)
        self.dateTime_from_Statfi.setMinimumDate(dtmin)
        dtmax = QtCore.QDate(2016,1,1)
        self.dateTime_from_Statfi.setDate(dtmax)
        self.dateTime_from_Statfi.setMaximumDate(dtmax)
        self.gridLayout_timeEdit_Statfi.addWidget(self.dateTime_from_Statfi, 0, 1, 1, 1)

        # Create "to" label for statfi
        self.label_to_Statfi = QtWidgets.QLabel(self.frame_TimeEdit_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.label_to_Statfi.setSizePolicy(sizePolicy)
        self.label_to_Statfi.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.label_to_Statfi.setFont(font)
        self.label_to_Statfi.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;\n"
"border-bottom-left-radius: 10px;")
        self.label_to_Statfi.setAlignment(QtCore.Qt.AlignCenter)
        self.gridLayout_timeEdit_Statfi.addWidget(self.label_to_Statfi, 1, 0, 1, 1)

        # Create "to" timeEdit for statfi
        self.dateTime_to_Statfi = QtWidgets.QDateTimeEdit(self.frame_TimeEdit_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.dateTime_to_Statfi.setSizePolicy(sizePolicy)
        self.dateTime_to_Statfi.setMinimumSize(QtCore.QSize(0, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        self.dateTime_to_Statfi.setFont(font)
        self.dateTime_to_Statfi.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 0px;")
        self.dateTime_to_Statfi.setCalendarPopup(False)
        self.dateTime_to_Statfi.setDisplayFormat("yyyy")
        dtmin = QtCore.QDate(1990,1,1)
        self.dateTime_to_Statfi.setMinimumDate(dtmin)
        dtmax = QtCore.QDate(2016,1,1)
        self.dateTime_to_Statfi.setDate(dtmax)
        self.dateTime_to_Statfi.setMaximumDate(dtmax)
        self.gridLayout_timeEdit_Statfi.addWidget(self.dateTime_to_Statfi, 1, 1, 1, 1)
        self.horizontalLayout.addWidget(self.frame_TimeEdit_Statfi)

        # Createa pushbutton plot for statfi
        self.pushButton_Plot_Statfi = QtWidgets.QPushButton(self.frame_PlotSettings_Statfi)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.pushButton_Plot_Statfi.setSizePolicy(sizePolicy)
        self.pushButton_Plot_Statfi.setMinimumSize(QtCore.QSize(75, 40))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.pushButton_Plot_Statfi.setFont(font)
        self.pushButton_Plot_Statfi.setStyleSheet("QPushButton {\n"
"    border-radius: 5px;\n"
"    background-color: rgb(89, 189, 244);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"        background-color: rgb(66, 244, 223);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"        background-color: rgb(179, 241, 244);\n"
"}\n"
"\n"
"")
        self.horizontalLayout.addWidget(self.pushButton_Plot_Statfi)
        self.verticalLayout_RightPanel.addWidget(self.frame_PlotSettings_Statfi)

        # Create spacer below Plot settings statfi
        spacerItem5 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.verticalLayout_RightPanel.addItem(spacerItem5)

        # Plot window layout
        self.PlotPanelLayout = QtWidgets.QHBoxLayout()
        self.PlotPanelLayout.setContentsMargins(0, 0, 0, 0)

        # Create widget for Smear plot
        self.widget_SmearPlot = QtWidgets.QWidget(self.frame_RightPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.widget_SmearPlot.setSizePolicy(sizePolicy)
        self.widget_SmearPlot.setMinimumSize(QtCore.QSize(0, 400))
        self.widget_SmearPlot.setStyleSheet("background-color: rgb(16, 39, 112);\n"
"border-top-left-radius: 10px;\n"
"border-top-right-radius: 10px;")
        self.PlotPanelLayout.addWidget(self.widget_SmearPlot)
        self.widget_SmearPlot.setLayout(self._smearPlotLayout)

        # Create widget for Statfi plot
        self.widget_StatfiPlot = QtWidgets.QWidget(self.frame_RightPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.widget_StatfiPlot.setSizePolicy(sizePolicy)
        self.widget_StatfiPlot.setMinimumSize(QtCore.QSize(0, 400))
        self.widget_StatfiPlot.setStyleSheet("background-color: rgb(16, 59, 112);\n"
"border-top-left-radius: 10px;\n"
"border-top-right-radius: 10px;")
        self.PlotPanelLayout.addWidget(self.widget_StatfiPlot)
        self.widget_StatfiPlot.setLayout(self._statfiPlotLayout)

        self.verticalLayout_RightPanel.addLayout(self.PlotPanelLayout)

        # Create plot for plot bottom panel
        self.frame_PlotBottomPanel = QtWidgets.QFrame(self.frame_RightPanel)
        self.frame_PlotBottomPanel.setMinimumSize(QtCore.QSize(0, 90))
        self.frame_PlotBottomPanel.setStyleSheet("background-color: rgb(16, 39, 112);\n"
"border-bottom-left-radius: 10px;\n"
"border-bottom-right-radius: 10px;")
        self.frame_PlotBottomPanel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_PlotBottomPanel.setFrameShadow(QtWidgets.QFrame.Raised)
        self.PlotBottomPanel = QtWidgets.QHBoxLayout(self.frame_PlotBottomPanel)
        self.PlotBottomPanel.setSizeConstraint(QtWidgets.QLayout.SetMinimumSize)
        self.horizontalLayout_PlotBottomPanel = QtWidgets.QHBoxLayout()
        self.horizontalLayout_PlotBottomPanel.setContentsMargins(0, 0, 0, 0)

        # Create layout for radio selection
        self.verticalLayout_RadioSelection = QtWidgets.QVBoxLayout()
        self.verticalLayout_RadioSelection.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_RadioSelection.setSpacing(0)

        # Create spacer on top of radio selections
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.verticalLayout_RadioSelection.addItem(spacerItem6)
        self.frame_RadioSelection = QtWidgets.QFrame(self.frame_PlotBottomPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.frame_RadioSelection.setSizePolicy(sizePolicy)
        self.frame_RadioSelection.setMinimumSize(QtCore.QSize(0, 90))
        self.frame_RadioSelection.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 5px;")
        self.frame_RadioSelection.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_RadioSelection.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_RadioSelection.setLineWidth(0)

        # Create layout for radio selection
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_RadioSelection)
        self.verticalLayout_3.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout_RadioSelection_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_RadioSelection_2.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_RadioSelection_2.setSpacing(0)

        # Create Scatter Radiobutton
        self.radioButton_Scatter = QtWidgets.QRadioButton(self.frame_RadioSelection)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.radioButton_Scatter.setSizePolicy(sizePolicy)
        self.radioButton_Scatter.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.radioButton_Scatter.setFont(font)
        self.radioButton_Scatter.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.radioButton_Scatter.setStyleSheet("QRadioButton::indicator{\n"
"    width: 15px;\n"
"    height: 15px;\n"
"}")
        self.radioButton_Scatter.setIconSize(QtCore.QSize(25, 25))
        self.radioButton_Scatter.setChecked(True)
        self.verticalLayout_RadioSelection_2.addWidget(self.radioButton_Scatter)

        # Create BarChart radiobutton
        self.radioButton_BarChart = QtWidgets.QRadioButton(self.frame_RadioSelection)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.radioButton_BarChart.setSizePolicy(sizePolicy)
        self.radioButton_BarChart.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.radioButton_BarChart.setFont(font)
        self.radioButton_BarChart.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.radioButton_BarChart.setIconSize(QtCore.QSize(25, 25))
        self.verticalLayout_RadioSelection_2.addWidget(self.radioButton_BarChart)
        self.verticalLayout_3.addLayout(self.verticalLayout_RadioSelection_2)
        self.verticalLayout_RadioSelection.addWidget(self.frame_RadioSelection)
        self.verticalLayout_RadioSelection.setStretch(0, 20)
        self.horizontalLayout_PlotBottomPanel.addLayout(self.verticalLayout_RadioSelection)

        # Create Spacer to plotbottom panel, seems this doesnt do anything but might break code later on if deleted
        spacerItem7 = QtWidgets.QSpacerItem(0, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_PlotBottomPanel.addItem(spacerItem7)

        # Create layout for historical data button
        self.verticalLayout_AddHistoricalData = QtWidgets.QVBoxLayout()
        self.verticalLayout_AddHistoricalData.setContentsMargins(0, -1, -1, -1)
        self.verticalLayout_AddHistoricalData.setSpacing(0)

        # Create spacer on top of add historical data
        spacerItem8 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        self.verticalLayout_AddHistoricalData.addItem(spacerItem8)

        # Create pushbutton addhistoricaldata
        self.pushButton_AddHistoricalData = QtWidgets.QPushButton(self.frame_PlotBottomPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.pushButton_AddHistoricalData.setSizePolicy(sizePolicy)
        self.pushButton_AddHistoricalData.setMinimumSize(QtCore.QSize(120, 90))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        self.pushButton_AddHistoricalData.setFont(font)
        self.pushButton_AddHistoricalData.setStyleSheet("QPushButton {\n"
"    border-radius: 5px;\n"
"    background-color: rgb(89, 189, 244);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"        background-color: rgb(66, 244, 223);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"        background-color: rgb(179, 241, 244);\n"
"}")
        self.verticalLayout_AddHistoricalData.addWidget(self.pushButton_AddHistoricalData)

        # Create stretch for add historical data button
        self.verticalLayout_AddHistoricalData.setStretch(0, 20)
        self.horizontalLayout_PlotBottomPanel.addLayout(self.verticalLayout_AddHistoricalData)

        # Create spacer to the right of the add historical data button
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_PlotBottomPanel.addItem(spacerItem9)

        self.tableView_PlotBottomTable = QtWidgets.QTableWidget(self.frame_PlotBottomPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        self.tableView_PlotBottomTable.setSizePolicy(sizePolicy)
        self.tableView_PlotBottomTable.setMinimumSize(QtCore.QSize(240, 20))
        self.tableView_PlotBottomTable.setStyleSheet("background-color: rgb(89, 189, 244);\n"
"border-radius: 5px;")
        self.tableView_PlotBottomTable.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.horizontalLayout_PlotBottomPanel.addWidget(self.tableView_PlotBottomTable)
        self.tableView_PlotBottomTable.setColumnCount(3)
        self.tableView_PlotBottomTable.setRowCount(1)
        cellwidth = 40*2
        cellheight = 20*2
        self.tableView_PlotBottomTable.setColumnWidth(0,cellwidth)
        self.tableView_PlotBottomTable.setRowHeight(0,cellheight)
        self.tableView_PlotBottomTable.setColumnWidth(1,cellwidth)
        #self.tableView_PlotBottomTable.setRowHeight(1,cellheight)
        self.tableView_PlotBottomTable.setColumnWidth(2,cellwidth)
        #self.tableView_PlotBottomTable.setRowHeight(2,cellheight)

        # Set table headers
        self.tableView_PlotBottomTable.setHorizontalHeaderLabels(["Min","Max","Avg"])
        self.tableView_PlotBottomTable.setVerticalHeaderLabels(["Var"])

        # Add stretch to plotbottompanel
        self.horizontalLayout_PlotBottomPanel.setStretch(0, 12)
        self.horizontalLayout_PlotBottomPanel.setStretch(1, 1)
        self.horizontalLayout_PlotBottomPanel.setStretch(2, 1)
        self.horizontalLayout_PlotBottomPanel.setStretch(3, 60)
        self.horizontalLayout_PlotBottomPanel.setStretch(4, 40)
        self.PlotBottomPanel.addLayout(self.horizontalLayout_PlotBottomPanel)
        self.verticalLayout_RightPanel.addWidget(self.frame_PlotBottomPanel)

        # Create layout for bottom buttons
        self.horizontalLayout_BottomButtons = QtWidgets.QHBoxLayout()
        self.horizontalLayout_BottomButtons.setContentsMargins(10, 10, 10, 10)

        # Create spacer left of the bottom panels
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_BottomButtons.addItem(spacerItem10)

        # Create save to favorites pushbutton
        self.pushButton_SaveToFavorites = QtWidgets.QPushButton(self.frame_RightPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.pushButton_SaveToFavorites.setSizePolicy(sizePolicy)
        self.pushButton_SaveToFavorites.setMinimumSize(QtCore.QSize(240, 40))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.pushButton_SaveToFavorites.setFont(font)
        self.pushButton_SaveToFavorites.setStyleSheet("QPushButton {\n"
"    border-radius: 2px;\n"
"    background-color: rgb(89, 189, 244);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"        background-color: rgb(66, 244, 223);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"        background-color: rgb(179, 241, 244);\n"
"}")
        self.horizontalLayout_BottomButtons.addWidget(self.pushButton_SaveToFavorites)

        # Create spacer between the bottom buttons
        spacerItem11 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_BottomButtons.addItem(spacerItem11)

        # Create ExportPlot button
        self.pushButton_ExportPlot = QtWidgets.QPushButton(self.frame_RightPanel)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        self.pushButton_ExportPlot.setSizePolicy(sizePolicy)
        self.pushButton_ExportPlot.setMinimumSize(QtCore.QSize(170, 40))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        self.pushButton_ExportPlot.setFont(font)
        self.pushButton_ExportPlot.setStyleSheet("QPushButton {\n"
"    border-radius: 2px;\n"
"    background-color: rgb(89, 189, 244);\n"
"}\n"
"\n"
"QPushButton:hover {\n"
"        background-color: rgb(66, 244, 223);\n"
"}\n"
"\n"
"QPushButton:pressed {\n"
"        background-color: rgb(179, 241, 244);\n"
"}")
        self.horizontalLayout_BottomButtons.addWidget(self.pushButton_ExportPlot)

        # Create stretch for bottombuttons
        self.horizontalLayout_BottomButtons.setStretch(0, 64)
        self.horizontalLayout_BottomButtons.setStretch(1, 2)
        self.horizontalLayout_BottomButtons.setStretch(2, 1)
        self.horizontalLayout_BottomButtons.setStretch(3, 2)

        # Create layout for rightpanels and add stretch to it.
        self.verticalLayout_RightPanel.addLayout(self.horizontalLayout_BottomButtons)
        self.verticalLayout_RightPanel.setStretch(0, 2)
        self.verticalLayout_RightPanel.setStretch(1, 2)
        self.verticalLayout_RightPanel.setStretch(2, 2)
        self.verticalLayout_RightPanel.setStretch(4, 10)
        self.verticalLayout_RightPanel.setStretch(5, 4)
        self.verticalLayout_RightPanel.setStretch(6, 1)
        self.RightPanelVertical.addLayout(self.verticalLayout_RightPanel)

        # Add horizontallayout to main window and add stretch
        self.horizontalLayout_Main.addWidget(self.frame_RightPanel)
        self.horizontalLayout_Main.setStretch(0, 1)
        self.horizontalLayout_Main.setStretch(1, 4)
        self.CentralWidgetLayout.addLayout(self.horizontalLayout_Main, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        
        # Run retranslateUI and connect buttons
        self.retranslateUi(MainWindow)

        # Method Connections
        # PushButtons
        self.pushButton_Statfi.released.connect(self.frame_PlotSettings_Smear.hide)
        self.pushButton_Smear.released.connect(self.frame_PlotSettings_Smear.show)
        self.pushButton_Statfi.released.connect(self.frame_PlotSettings_Statfi.show)
        self.pushButton_Smear.released.connect(self.frame_PlotSettings_Statfi.hide)
        self.pushButton_Smear.released.connect(self.widget_SmearPlot.show)
        self.pushButton_Smear.released.connect(self.widget_StatfiPlot.hide)
        self.pushButton_Smear.released.connect(self.setSmear)
        self.pushButton_Smear.released.connect(self.tableView_PlotBottomTable.show)
        self.pushButton_Statfi.released.connect(self.widget_StatfiPlot.show)
        self.pushButton_Statfi.released.connect(self.widget_SmearPlot.hide)
        self.pushButton_Statfi.released.connect(self.setStatfi)
        self.pushButton_Statfi.released.connect(self.tableView_PlotBottomTable.hide)
        self.pushButton_ExportPlot.released.connect(self.savePlot)

        # Combobox Stations
        self.comboBox_Stations.model().dataChanged.connect(self.updateCurrentStations)
        self.comboBox_Stations.model().dataChanged.connect(self._dataHandler.updateCurrentVariables)
        self.comboBox_Stations.model().dataChanged.connect(self._dataHandler.updateCurrentVarTables)
        self.comboBox_Stations.model().dataChanged.connect(self.setVariablesToCombobox)

        # ComboBox Variables
        self.comboBox_Variables.model().dataChanged.connect(self.updateVariables)

        # RadioButtons
        self.radioButton_BarChart.clicked.connect(self.setBar)
        self.radioButton_Scatter.clicked.connect(self.setLine)

        # Calendars
        self.dateTime_to_Smear.dateTimeChanged.connect(self.updateToDateSmear)
        self.dateTime_from_Smear.dateTimeChanged.connect(self.updateFromDateSmear)
        self.dateTime_to_Statfi.dateTimeChanged.connect(self.updateToDateStatfi)
        self.dateTime_from_Statfi.dateTimeChanged.connect(self.updateFromDateStatfi)

        # Plot Button SMEAR
        self.pushButton_Plot_Smear.released.connect(self.smearQuery)

        # Plotting
        self.pushButton_Plot_Smear.released.connect(self.smearPlot)
        self.pushButton_Plot_Smear.released.connect(self.stats)

        # Add search history:
        self.pushButton_AddHistoricalData.released.connect(self.merge)

        # Plot Button STATFI
        self.pushButton_Plot_Statfi.released.connect(self._dataHandler.statfiQuery)

        self.pushButton_Plot_Statfi.released.connect(self.statfiPlot)

       # self.pushButton_Plot_Statfi.released.connect(self.plotToStatfi)

        # Statfi checkboxes
        self.checkBox_Volume.stateChanged.connect(self.setSTATFIvolume)
        self.checkBox_Intensity.stateChanged.connect(self.setSTATFIintensity)
        self.checkBox_Indexed.stateChanged.connect(self.setSTATFIindexed)
        self.checkBox_IntensityIndexed.stateChanged.connect(self.setSTATFIintensityIndexed)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("Vitosta Vaille Valmis", "Vitosta Vaille Valmis"))
        self.label_Favorites.setText(_translate("MainWindow", "Favorites"))
        self.label_SearchHistory.setText(_translate("MainWindow", "Search History"))
        self.pushButton_Smear.setText(_translate("MainWindow", "SMEAR"))
        self.pushButton_Statfi.setText(_translate("MainWindow", "STATFI"))
        self.label_stations.setText(_translate("MainWindow", "Stations:"))
        self.label_variables.setText(_translate("MainWindow", "Variabels:"))
        self.label_to_Smear.setText(_translate("MainWindow", "To:"))
        self.label_from_Smear.setText(_translate("MainWindow", "From:"))
        self.pushButton_Plot_Smear.setText(_translate("MainWindow", "Plot"))
        self.checkBox_Volume.setText(_translate("MainWindow", "Volume"))
        self.checkBox_Intensity.setText(_translate("MainWindow", "Intensity"))
        self.checkBox_Indexed.setText(_translate("MainWindow", "Indexed"))
        self.checkBox_IntensityIndexed.setText(_translate("MainWindow", "Intensity Indexed"))
        self.label_from_Statfi.setText(_translate("MainWindow", "From:"))
        self.label_to_Statfi.setText(_translate("MainWindow", "To:"))
        self.pushButton_Plot_Statfi.setText(_translate("MainWindow", "Plot"))
        self.radioButton_Scatter.setText(_translate("MainWindow", "Scatter"))
        self.radioButton_BarChart.setText(_translate("MainWindow", "BarChart"))
        self.pushButton_AddHistoricalData.setText(_translate("MainWindow", "Add \n"
"Historical\n"
" Data"))
        self.pushButton_SaveToFavorites.setText(_translate("MainWindow", "Save to Favorites"))
        self.pushButton_ExportPlot.setText(_translate("MainWindow", "Export plot"))

        # Hide statfi
        self.frame_PlotSettings_Statfi.hide()
        self.widget_StatfiPlot.hide()

        # Set stations to stations combobox
        self.setStationsToComboBox()

        # Update date values in Data class
        self.updateToDateSmear()
        self.updateFromDateSmear()
        self.updateToDateStatfi()
        self.updateFromDateStatfi()

    def setSTATFIvolume(self):
        if self.checkBox_Volume.checkState() == 0:
                self._dataHandler._STATFIitems.remove("Khk_yht")
        else:
               self._dataHandler._STATFIitems.append("Khk_yht") 

    def setSTATFIintensity(self):
        if self.checkBox_Intensity.checkState() == 0:
                self._dataHandler._STATFIitems.remove("Khk_yht_las")
        else:
                self._dataHandler._STATFIitems.append("Khk_yht_las")

    def setSTATFIindexed(self):
        if self.checkBox_Indexed.checkState() == 0:
                self._dataHandler._STATFIitems.remove("Khk_yht_index")
        else:
               self._dataHandler._STATFIitems.append("Khk_yht_index")

    def setSTATFIintensityIndexed(self):
        if self.checkBox_IntensityIndexed.checkState() == 0:
                self._dataHandler._STATFIitems.remove("Khk_yht_las_index")
        else:
               self._dataHandler._STATFIitems.append("Khk_yht_las_index")

    def setVariablesToCombobox(self):
        self.comboBox_Variables.clear()

        return self.comboBox_Variables.addItems(self._dataHandler._currentVariables)

    def setStationsToComboBox(self):
        return self.comboBox_Stations.addItems(self._dataHandler._stations)
        
    def updateCurrentStations(self):
        self._dataHandler._currentStations = self.comboBox_Stations.currentData()
        pass

    def updateVariables(self):

        var = self.comboBox_Variables.currentData()

        #self._dataHandler._SMEARunits = var
        
        if len(var) > 0:
                self._dataHandler._table_variable_name = self._dataHandler._currentTable[self._dataHandler._currentVariables.index(var[0])]
                self.tableView_PlotBottomTable.setVerticalHeaderLabels([var[0]])
                #self._dataHandler._SMEARlabels[0] = self._dataHandler._table_variable_name

    def QdateTimeToString(self, QDateTime):
        time = QDateTime.toPyDateTime()
        year = time.strftime("%Y")
        month = time.strftime("%m")
        day = time.strftime("%d")
        hour = time.strftime("%H")
        minute = time.strftime("%M")
        second = time.strftime("%S")
        time = year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + ".000"
        return time

    # Ser smear query dates:
    def updateFromDateSmear(self):
        self._dataHandler._start_date = self.QdateTimeToString(self.dateTime_from_Smear.dateTime())
    def updateToDateSmear(self):
        self._dataHandler._end_date = self.QdateTimeToString(self.dateTime_to_Smear.dateTime())

    # Updates the statfi date range when start date is changed:
    def updateFromDateStatfi(self):
        start = int(self.QdateTimeToString(self.dateTime_from_Statfi.dateTime())[0:4])
        end = int(self.QdateTimeToString(self.dateTime_to_Statfi.dateTime())[0:4]) + 1

        range_ = range(start, end, 1) 
        # Convert to string:
        years = []

        for i in range_:
                years.append(str(i))

        self._dataHandler._STATFIyears = years


    # Updates the statfi date range when end date is changed:
    def updateToDateStatfi(self):
        start = int(self.QdateTimeToString(self.dateTime_from_Statfi.dateTime())[0:4])
        end = int(self.QdateTimeToString(self.dateTime_to_Statfi.dateTime())[0:4]) + 1
        
        range_ = range(start, end, 1) 
        # Convert to string:
        years = []

        for i in range_:
                years.append(str(i))

        self._dataHandler._STATFIyears = years

    # Plots given chart to Smear or Statfi plot widget.
    def plotToSmear(self):
        for i in reversed(range(self._smearPlotLayout.count())): 
                self._smearPlotLayout.itemAt(i).widget().setParent(None)

        #if self._smearPlotLayout.count() != 0:
        #    self._smearPlotLayout.removeItem(self._smearPlotLayout.itemAt(0))

        self._smearPlotLayout.addWidget(self._barChartSmear)

    def plotToStatfi(self):
        for i in reversed(range(self._statfiPlotLayout.count())): 
                self._statfiPlotLayout.itemAt(i).widget().setParent(None)

        #if self._statfiPlotLayout.count() != 0:
        #    self._statfiPlotLayout.removeItem(self._statfiPlotLayout.itemAt(0))

        return self._statfiPlotLayout.addWidget(self._barChartStatfi)
       
    #Receive SMEAR query parameters, create a button of them and add the button to the Search history ScrollArea
    def addHistorySmear(self, parameters):
        contents = "Smear "
        contents += "{} ".format(parameters["aggregation_type"])
        contents += "{} ".format(parameters["interval_length"])
        contents += "{} \n".format(parameters["start_date"])
        contents += "{} ".format(parameters["end_date"])
        contents += "{} ".format(parameters["table_variable_name"])
        self.historyButtonSmear = QtWidgets.QPushButton(contents)
        self.Layout_SearchHistory.addWidget(self.historyButtonSmear)
        self.historyButtonSmear.setCheckable(True)
        self.historyButtonSmear.toggle()
        self.historyButtonSmear.show()

    #Receive STATFI query parameters, create a button of them and add the button to the Search history ScrollArea
    def addHistoryStatfi(self, parameters):
        contents = "Statfi "
        contents += "{} ".format(parameters["items"])
        contents += "{} ".format(parameters["years"])
        self.historyButtonStatfi = QtWidgets.QPushButton(contents)
        self.Layout_SearchHistory.addWidget(self.historyButtonStatfi)
        self.historyButtonStatfi.setCheckable(True)
        self.historyButtonStatfi.toggle()
        self.historyButtonStatfi.show()

    #Receive SMEAR query parameters, create a json file of them and call a function to add them to the favorites scrollarea
    def saveToFavoritesSmear(self, parameters):
        with open('favoritesSmear.json', 'w') as f:
            json.dump(parameters, f)
        self.addFavoritesSmear()

    #Receive STATFI query parameters, create a json file of them and call a function to add them to the favorites scrollarea
    def saveToFavoritesStatfi(self, parameters):
        with open('favoritesStatfi.json', 'w') as f:
            json.dump(parameters, f)
        self.addFavoritesStatfi()
    
    # Set the program to plot to smear view:
    def setSmear(self):
        self._smear = True
        self._statfi = False

    # Set the program to plot to statfi view:
    def setStatfi(self):
        self._smear = False
        self._statfi = True

    # Set to plot line charts:
    def setLine(self):
        self._line = True
        self._bar = False

    # Set to plot bar charts:
    def setBar(self):
        self._line = False
        self._bar = True

    # Make smear plot
    def smearPlot(self):
        # Plotting
        
        if self._bar and self._smear:
                self._barChartSmear.clear()
                self._barChartSmear.make_bar_chart_smear()
        elif self._line and self._smear:
                self._barChartSmear.clear()
                self._barChartSmear.make_line_chart_smear()
        self.plotToSmear()
        
    # Make statfiplot:
    def statfiPlot(self):
        # Plotting
        if self._bar == True and self._statfi == True:
                self._barChartStatfi.clear()
                self._barChartStatfi.make_bar_chart_statfi()
        elif self._line == True and self._statfi == True:
                self._barChartStatfi.clear()
                self._barChartStatfi.make_line_chart_statfi()
        self.plotToStatfi()


    # Merge smear and statfi - and plot:
    def merge(self):
        # Statfi data on smear data:
        if self._statfi:
                self._barChartStatfi.clear()
                self._barChartStatfi.mergeSTATFI_on_SMEAR(self._line,self._bar)
                self.plotToStatfi()
        # Smear data on statfi data:
        elif self._smear:
                self._barChartSmear.clear()
                self._barChartSmear.mergeSMEAR_on_STATFI(self._line,self._bar)
                self.plotToSmear()

    # Export plot:
    def savePlot(self):
            # Smear:
            if self._smear:
                self._barChartSmear.save()
            # Statfi:
            elif self._statfi:
                self._barChartStatfi.save()

    # Make smear query if dates are allowed:
    def smearQuery(self):
            if self.QdateTimeToString(self.dateTime_to_Smear.dateTime()) > self.QdateTimeToString(self.dateTime_from_Smear.dateTime()):
                self._dataHandler.smearQuery()

    # APpend stats to table:
    def stats(self):
            self.tableView_PlotBottomTable.setItem(0,0,QtWidgets.QTableWidgetItem(str(self._dataHandler._SMEARmin)))
            self.tableView_PlotBottomTable.setItem(0,1,QtWidgets.QTableWidgetItem(str(self._dataHandler._SMEARmax)))
            self.tableView_PlotBottomTable.setItem(0,2,QtWidgets.QTableWidgetItem(str(self._dataHandler._SMEARavg)))


    #Read the json file containing the favorited SMEAR queries, create buttons of them and add them to the favorites ScrollArea
    def addFavoritesSmear(self):
        if (exists('favoritesSmear.json')):
                f = open('favoritesSmear.json')
                parameters = json.load(f)
                contents = "Smear "
                contents += "{} ".format(parameters["aggregation_type"])
                contents += "{} ".format(parameters["interval_length"])
                contents += "{} \n".format(parameters["start_date"])
                contents += "{} ".format(parameters["end_date"])
                contents += "{} ".format(parameters["table_variable_name"])
                self.favoriteButtonSmear = QtWidgets.QPushButton(contents)
                self.favoriteButtonSmear.setCheckable(True)
                self.favoriteButtonSmear.toggle()
                self.favoriteButtonSmear.show()
                self.Layout_Favorites.addWidget(self.favoriteButtonSmear)
                f.close()

    #Read the json file containing the favorited STATFI queries, create buttons of them and add them to the favorites ScrollArea
    def addFavoritesStatfi(self):
        if (exists('favoritesStatfi.json')):
                f = open('favoritesStatfi.json')
                parameters = json.load(f)
                contents = "Statfi "
                contents += "{} ".format(parameters["items"])
                contents += "{} ".format(parameters["years"])
                self.favoriteButtonStatfi = QtWidgets.QPushButton(contents)
                self.favoriteButtonStatfi.setCheckable(True)
                self.favoriteButtonStatfi.toggle()
                self.favoriteButtonStatfi.show()
                self.Layout_Favorites.addWidget(self.favoriteButtonStatfi)
                f.close()
        